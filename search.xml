<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux常见命令</title>
    <url>/2022/09/18/llinux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="关机-x2F-重启-x2F-注销"><a href="#关机-x2F-重启-x2F-注销" class="headerlink" title="关机&#x2F;重启&#x2F;注销"></a>关机&#x2F;重启&#x2F;注销</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>shutdown -h now</td>
<td>即刻关机</td>
</tr>
<tr>
<td>shutdown -h 10</td>
<td>10分钟后关机</td>
</tr>
</tbody></table>
<span id="more"></span>
<p>| shutdown -h 11:00 | 11：00关机 |<br>| shutdown -h +10 | 预定时间关机（10分钟后） |<br>| shutdown -c | 取消指定时间关机 |<br>| shutdown -r now | 重启 |<br>| shutdown -r 10 | 10分钟之后重启 |<br>| shutdown -r 11:00 | 定时重启 |<br>| reboot | 重启 |<br>| init 6 | 重启 |<br>| init 0 | ⽴刻关机 |<br>| telinit 0 | 关机 |<br>| poweroff | ⽴刻关机 |<br>| halt | 关机 |<br>| sync | buff数据同步到磁盘 |<br>| logout | 退出登录Shell |</p>
<h1 id="系统信息和性能查看"><a href="#系统信息和性能查看" class="headerlink" title="系统信息和性能查看"></a>系统信息和性能查看</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>uname -a</td>
<td>查看内核&#x2F;OS&#x2F;CPU信息</td>
</tr>
<tr>
<td>uname -r</td>
<td>查看内核版本</td>
</tr>
<tr>
<td>uname -m</td>
<td>查看处理器架构</td>
</tr>
<tr>
<td>arch</td>
<td>查看处理器架构</td>
</tr>
<tr>
<td>hostname</td>
<td>查看计算机名</td>
</tr>
<tr>
<td>who</td>
<td>显示当前登录系统的⽤户</td>
</tr>
<tr>
<td>who am i</td>
<td>显示登录时的⽤户名</td>
</tr>
<tr>
<td>whoami</td>
<td>显示当前⽤户名</td>
</tr>
<tr>
<td>cat &#x2F;proc&#x2F;version</td>
<td>查看linux版本信息</td>
</tr>
<tr>
<td>cat &#x2F;proc&#x2F;cpuinfo</td>
<td>查看CPU信息</td>
</tr>
<tr>
<td>cat &#x2F;proc&#x2F;interrupts</td>
<td>查看中断</td>
</tr>
<tr>
<td>cat &#x2F;proc&#x2F;loadavg</td>
<td>查看系统负载</td>
</tr>
<tr>
<td>uptime</td>
<td>查看系统运⾏时间、⽤户数、负载</td>
</tr>
<tr>
<td>env</td>
<td>查看系统的环境变量</td>
</tr>
<tr>
<td>lsusb -tv</td>
<td>查看系统USB设备信息</td>
</tr>
<tr>
<td>lspci -tv</td>
<td>查看系统PCI设备信息</td>
</tr>
<tr>
<td>lsmod</td>
<td>查看已加载的系统模块</td>
</tr>
<tr>
<td>grep MemTotal &#x2F;proc&#x2F;meminfo</td>
<td>查看内存总量</td>
</tr>
<tr>
<td>grep MemFree &#x2F;proc&#x2F;meminfo</td>
<td>查看空闲内存量</td>
</tr>
<tr>
<td>free -m</td>
<td>查看内存⽤量和交换区⽤量</td>
</tr>
<tr>
<td>date</td>
<td>显示系统⽇期时间</td>
</tr>
<tr>
<td>cal 2021</td>
<td>显示2021⽇历表</td>
</tr>
<tr>
<td>top</td>
<td>动态显示cpu&#x2F;内存&#x2F;进程等情况</td>
</tr>
<tr>
<td>vmstat 1 20</td>
<td>每1秒采⼀次系统状态，采20次</td>
</tr>
<tr>
<td>iostat</td>
<td>查看io读写&#x2F;cpu使⽤情况</td>
</tr>
<tr>
<td>查看io读写&#x2F;cpu使⽤情况</td>
<td>查询cpu使⽤情况（1秒⼀次，共10次）</td>
</tr>
<tr>
<td>sar -d 1 10</td>
<td>查询磁盘性能</td>
</tr>
</tbody></table>
<h1 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>fdisk -l</td>
<td>查看所有磁盘分区</td>
</tr>
<tr>
<td>swapon -s</td>
<td>查看所有交换分区</td>
</tr>
<tr>
<td>df -h</td>
<td>查看磁盘使⽤情况及挂载点</td>
</tr>
<tr>
<td>df -hl</td>
<td>同上</td>
</tr>
<tr>
<td>du -sh &#x2F;dir</td>
<td>查看指定某个⽬录的⼤⼩</td>
</tr>
<tr>
<td>du -sk * &amp;#124; sort -rn</td>
<td>从⾼到低依次显示⽂件和⽬录⼤⼩</td>
</tr>
<tr>
<td>mount &#x2F;dev&#x2F;hda2 &#x2F;mnt&#x2F;hda2</td>
<td>挂载hda2盘</td>
</tr>
<tr>
<td>mount -t ntfs &#x2F;dev&#x2F;sdc1 &#x2F;mnt&#x2F;usbhd1</td>
<td>指定⽂件系统类型挂载（如ntfs）</td>
</tr>
<tr>
<td>mount -o loop xxx.iso &#x2F;mnt&#x2F;cdrom</td>
<td>挂 载 iso ⽂ 件</td>
</tr>
<tr>
<td>umount -v &#x2F;dev&#x2F;sda1</td>
<td>通过设备名卸载</td>
</tr>
<tr>
<td>umount -v &#x2F;mnt&#x2F;mymnt</td>
<td>通过挂载点卸载</td>
</tr>
<tr>
<td>fuser -km &#x2F;mnt&#x2F;hda1</td>
<td>强制卸载(慎⽤)</td>
</tr>
</tbody></table>
<h1 id="⽤户和⽤户组"><a href="#⽤户和⽤户组" class="headerlink" title="⽤户和⽤户组"></a>⽤户和⽤户组</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>useradd codesheep</td>
<td>创建⽤户</td>
</tr>
<tr>
<td>userdel -r codesheep</td>
<td>删除⽤户</td>
</tr>
<tr>
<td>usermod -g group_name user_name</td>
<td>修改⽤户的组</td>
</tr>
<tr>
<td>usermod -aG group_name user_name</td>
<td>将⽤户添加到组</td>
</tr>
<tr>
<td>usermod -s &#x2F;bin&#x2F;ksh -d &#x2F;home&#x2F;codepig –g dev codesheep</td>
<td>修改⽤户codesheep的登录Shell、主⽬录以及⽤户组</td>
</tr>
<tr>
<td>groups test</td>
<td>查看test⽤户所在的组</td>
</tr>
<tr>
<td>groupadd group_name</td>
<td>创建⽤户组</td>
</tr>
<tr>
<td>groupdel group_name</td>
<td>删除⽤户组</td>
</tr>
<tr>
<td>groupmod -n new_name old_name</td>
<td>重命名⽤户组</td>
</tr>
<tr>
<td>su - user_name</td>
<td>su - user_name</td>
</tr>
<tr>
<td>passwd</td>
<td>修改⼝令</td>
</tr>
<tr>
<td>passwd codesheep</td>
<td>修改某⽤户的⼝令</td>
</tr>
<tr>
<td>w</td>
<td>查看活动⽤户</td>
</tr>
<tr>
<td>id codesheep</td>
<td>查看指定⽤户codesheep信息</td>
</tr>
<tr>
<td>last</td>
<td>查看⽤户登录⽇志</td>
</tr>
<tr>
<td>crontab -l</td>
<td>查看当前⽤户的计划任务</td>
</tr>
<tr>
<td>cut -d: -f1 &#x2F;etc&#x2F;passwd</td>
<td>查看系统所有⽤户</td>
</tr>
<tr>
<td>cut -d: -f1 &#x2F;etc&#x2F;group</td>
<td>查看系统所有组</td>
</tr>
</tbody></table>
<h1 id="⽹络和进程管理"><a href="#⽹络和进程管理" class="headerlink" title="⽹络和进程管理"></a>⽹络和进程管理</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ifconfig</td>
<td>查看⽹络接⼝属性</td>
</tr>
<tr>
<td>ifconfig eth0</td>
<td>查看某⽹卡的配置</td>
</tr>
<tr>
<td>route -n</td>
<td>查看路由表</td>
</tr>
<tr>
<td>netstat -lntp</td>
<td>查看所有监听端⼝</td>
</tr>
<tr>
<td>netstat -antp</td>
<td>查看已经建⽴的TCP连接</td>
</tr>
<tr>
<td>netstat -lutp</td>
<td>查看TCP&#x2F;UDP的状态信息</td>
</tr>
<tr>
<td>ifup eth0</td>
<td>启⽤eth0⽹络设备</td>
</tr>
<tr>
<td>ifdown eth0</td>
<td>禁⽤eth0⽹络设备</td>
</tr>
<tr>
<td>iptables -L</td>
<td>查看iptables规则</td>
</tr>
<tr>
<td>ifconfig eth0 192.168.1.1 netmask 255.255.255.0</td>
<td>配置ip地址</td>
</tr>
<tr>
<td>dhclient eth0</td>
<td>以dhcp模式启⽤eth0</td>
</tr>
<tr>
<td>route add -net 0&#x2F;0 gw Gateway_IP</td>
<td>配置默认⽹关</td>
</tr>
<tr>
<td>route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1</td>
<td>配置静态路由到达⽹络’192.168.0.0&#x2F;16’</td>
</tr>
<tr>
<td>route del 0&#x2F;0 gw Gateway_IP</td>
<td>删除静态路由</td>
</tr>
<tr>
<td>hostname</td>
<td>查看主机名</td>
</tr>
<tr>
<td>host <a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>解析主机名</td>
</tr>
<tr>
<td>nslookup <a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>查询DNS记录，查看域名解析是否正常</td>
</tr>
<tr>
<td>ps -ef</td>
<td>查看所有进程</td>
</tr>
<tr>
<td>ps -ef &amp;#124; grep codesheep</td>
<td>过滤出你需要的进程</td>
</tr>
<tr>
<td>kill -s name</td>
<td>kill指定名称的进程</td>
</tr>
<tr>
<td>kill -s pid</td>
<td>kill指定pid的进程</td>
</tr>
<tr>
<td>top</td>
<td>实时显示进程状态</td>
</tr>
<tr>
<td>vmstat 1 20</td>
<td>每1秒采⼀次系统状态，采20次</td>
</tr>
<tr>
<td>iostat</td>
<td>iostat</td>
</tr>
<tr>
<td>sar -u 1 10</td>
<td>查询cpu使⽤情况（1秒⼀次，共10次）</td>
</tr>
<tr>
<td>sar -d 1 10</td>
<td>查询磁盘性能</td>
</tr>
</tbody></table>
<h1 id="常⻅系统服务命令"><a href="#常⻅系统服务命令" class="headerlink" title="常⻅系统服务命令"></a>常⻅系统服务命令</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>chkconfig –list</td>
<td>列出系统服务</td>
</tr>
<tr>
<td>service &lt;服务名&gt; status</td>
<td>查看某个服务</td>
</tr>
<tr>
<td>service &lt;服务名&gt; start</td>
<td>启动某个服务</td>
</tr>
<tr>
<td>service &lt;服务名&gt; stop</td>
<td>终⽌某个服务</td>
</tr>
<tr>
<td>service &lt;服务名&gt; restart</td>
<td>重启某个服务</td>
</tr>
<tr>
<td>systemctl status &lt;服务名&gt;</td>
<td>查看某个服务</td>
</tr>
<tr>
<td>systemctl start &lt;服务名&gt;</td>
<td>启动某个服务</td>
</tr>
<tr>
<td>systemctl stop &lt;服务名&gt;</td>
<td>终⽌某个服务</td>
</tr>
<tr>
<td>systemctl restart &lt;服务名&gt;</td>
<td>重启某个服务</td>
</tr>
<tr>
<td>systemctl enable &lt;服务名&gt;</td>
<td>关闭⾃启动</td>
</tr>
<tr>
<td>systemctl disable &lt;服务名&gt;</td>
<td>关闭⾃启动</td>
</tr>
</tbody></table>
<h1 id="⽂件和⽬录操作"><a href="#⽂件和⽬录操作" class="headerlink" title="⽂件和⽬录操作"></a>⽂件和⽬录操作</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>cd &lt;⽬录名&gt;</td>
<td>进⼊某个⽬录</td>
</tr>
<tr>
<td>cd ..</td>
<td>回上级⽬录</td>
</tr>
<tr>
<td>cd ..&#x2F;..</td>
<td>回上两级⽬录</td>
</tr>
<tr>
<td>cd</td>
<td>进个⼈主⽬录</td>
</tr>
<tr>
<td>cd -</td>
<td>回上⼀步所在⽬录</td>
</tr>
<tr>
<td>pwd</td>
<td>显示当前路径</td>
</tr>
<tr>
<td>ls</td>
<td>查看⽂件⽬录列表</td>
</tr>
<tr>
<td>ls -F</td>
<td>查看⽬录中内容（显示是⽂件还是⽬录）</td>
</tr>
<tr>
<td>ls -l</td>
<td>查看⽂件和⽬录的详情列表</td>
</tr>
<tr>
<td>ls -a</td>
<td>查看隐藏⽂件</td>
</tr>
<tr>
<td>ls -lh</td>
<td>查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性）</td>
</tr>
<tr>
<td>ls -lSr</td>
<td>查看⽂件和⽬录列表（以⽂件⼤⼩升序查看）</td>
</tr>
<tr>
<td>tree</td>
<td>查看⽂件和⽬录的树形结构</td>
</tr>
<tr>
<td>mkdir &lt;⽬录名&gt;</td>
<td>创建⽬录</td>
</tr>
<tr>
<td>mkdir dir1 dir2</td>
<td>同时创建两个⽬录</td>
</tr>
<tr>
<td>mkdir -p &#x2F;tmp&#x2F;dir1&#x2F;dir2</td>
<td>创建⽬录树</td>
</tr>
<tr>
<td>rm -f file1</td>
<td>删除’file1’⽂件</td>
</tr>
<tr>
<td>rmdir dir1</td>
<td>删除’dir1’⽬录</td>
</tr>
<tr>
<td>rm -rf dir1</td>
<td>删除’dir1’⽬录和其内容</td>
</tr>
<tr>
<td>rm -rf dir1 dir2</td>
<td>同时删除两个⽬录及其内容</td>
</tr>
<tr>
<td>mv old_dir new_dir</td>
<td>重命名&#x2F;移动⽬录</td>
</tr>
<tr>
<td>cp file1 file2</td>
<td>复制⽂件</td>
</tr>
<tr>
<td>cp dir&#x2F;* .</td>
<td>复制某⽬录下的所有⽂件⾄当前⽬录</td>
</tr>
<tr>
<td>cp -a dir1 dir2</td>
<td>复制⽬录</td>
</tr>
<tr>
<td>cp -a &#x2F;tmp&#x2F;dir1 .</td>
<td>复制⼀个⽬录⾄当前⽬录</td>
</tr>
<tr>
<td>ln -s file1 link1</td>
<td>创建指向⽂件&#x2F;⽬录的软链接</td>
</tr>
<tr>
<td>ln file1 lnk1</td>
<td>创建指向⽂件&#x2F;⽬录的物理链接</td>
</tr>
<tr>
<td>find &#x2F; -name file1</td>
<td>从跟⽬录开始搜索⽂件&#x2F;⽬录</td>
</tr>
<tr>
<td>find &#x2F; -user user1</td>
<td>搜索⽤户user1的⽂件&#x2F;⽬录</td>
</tr>
<tr>
<td>find &#x2F;dir -name *.bin</td>
<td>在⽬录&#x2F;dir中搜带有.bin后缀的⽂件</td>
</tr>
<tr>
<td>locate &lt;关键词&gt;</td>
<td>快速定位⽂件</td>
</tr>
<tr>
<td>locate *.mp4</td>
<td>寻找.mp4结尾的⽂件</td>
</tr>
<tr>
<td>whereis &lt;关键词&gt;</td>
<td>显示某⼆进制⽂件&#x2F;可执⾏⽂件的路径</td>
</tr>
<tr>
<td>which &lt;关键词&gt;</td>
<td>查找系统⽬录下某的⼆进制⽂件</td>
</tr>
<tr>
<td>chmod ugo+rwx dir1</td>
<td>设置⽬录所有者(u)、群组(g)及其他⼈(o)的读（r）写(w)执⾏(x)权限</td>
</tr>
<tr>
<td>chmod go-rwx dir1</td>
<td>移除群组(g)与其他⼈(o)对⽬录的读写执⾏权限</td>
</tr>
<tr>
<td>chown user1 file1</td>
<td>改变⽂件的所有者属性</td>
</tr>
<tr>
<td>chown -R user1 dir1</td>
<td>改变⽬录的所有者属性</td>
</tr>
<tr>
<td>chgrp group1 file1</td>
<td>改变⽂件群组</td>
</tr>
<tr>
<td>chown user1:group1 file1</td>
<td>改变⽂件的所有⼈和群组</td>
</tr>
</tbody></table>
<h1 id="⽂件查看和处理"><a href="#⽂件查看和处理" class="headerlink" title="⽂件查看和处理"></a>⽂件查看和处理</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>cat file1</td>
<td>查看⽂件内容</td>
</tr>
<tr>
<td>cat -n file1</td>
<td>查看内容并标示⾏数</td>
</tr>
<tr>
<td>tac file1</td>
<td>从最后⼀⾏开始反看⽂件内容</td>
</tr>
<tr>
<td>more file1</td>
<td>more file1</td>
</tr>
<tr>
<td>less file1</td>
<td>类似more命令，但允许反向操作</td>
</tr>
<tr>
<td>head -2 file1</td>
<td>查看⽂件前两⾏</td>
</tr>
<tr>
<td>tail -2 file1</td>
<td>查看⽂件后两⾏</td>
</tr>
<tr>
<td>tail -f &#x2F;log&#x2F;msg</td>
<td>实时查看添加到⽂件中的内容</td>
</tr>
<tr>
<td>grep codesheep hello.txt</td>
<td>在⽂件hello.txt中查找关键词codesheep</td>
</tr>
<tr>
<td>grep ^sheep hello.txt</td>
<td>在⽂件hello.txt中查找以sheep开头的内容</td>
</tr>
<tr>
<td>grep [0-9] hello.txt</td>
<td>选择hello.txt⽂件中所有包含数字的⾏</td>
</tr>
<tr>
<td>sed ‘s&#x2F;s1&#x2F;s2&#x2F;g’ hello.txt</td>
<td>将hello.txt⽂件中的s1替换成s2</td>
</tr>
<tr>
<td>sed ‘&#x2F;^$&#x2F;d’ hello.txt</td>
<td>从hello.txt⽂件中删除所有空⽩⾏</td>
</tr>
<tr>
<td>sed ‘&#x2F; *#&#x2F;d; &#x2F;^$&#x2F;d’ hello.txt</td>
<td>从hello.txt⽂件中删除所有注释和空⽩⾏</td>
</tr>
<tr>
<td>sed -e ‘1d’ hello.txt</td>
<td>从⽂件hello.txt 中排除第⼀⾏</td>
</tr>
<tr>
<td>sed -n ‘&#x2F;s1&#x2F;p’ hello.txt</td>
<td>查看只包含关键词”s1”的⾏</td>
</tr>
<tr>
<td>sed -e ‘s&#x2F; *$&#x2F;&#x2F;‘ hello.txt</td>
<td>删除每⼀⾏最后的空⽩字符</td>
</tr>
<tr>
<td>sed -e ‘s&#x2F;s1&#x2F;&#x2F;g’ hello.txt</td>
<td>从⽂档中只删除词汇s1并保留剩余全部</td>
</tr>
<tr>
<td>sed -n ‘1,5p;5q’ hello.txt</td>
<td>查看从第⼀⾏到第5⾏内容</td>
</tr>
<tr>
<td>sed -n ‘5p;5q’ hello.txt</td>
<td>查看第5⾏</td>
</tr>
<tr>
<td>paste file1 file2</td>
<td>合并两个⽂件或两栏的内容</td>
</tr>
<tr>
<td>paste -d ‘+’ file1 file2</td>
<td>合并两个⽂件或两栏的内容，中间⽤”+”区分</td>
</tr>
<tr>
<td>sort file1 file2</td>
<td>排序两个⽂件的内容</td>
</tr>
<tr>
<td>comm -1 file1 file2</td>
<td>⽐较两个⽂件的内容(去除’file1’所含内容)</td>
</tr>
<tr>
<td>comm -2 file1 file2</td>
<td>⽐较两个⽂件的内容(去除’file2’所含内容</td>
</tr>
<tr>
<td>comm -3 file1 file2</td>
<td>⽐较两个⽂件的内容(去除两⽂件共有部分)</td>
</tr>
</tbody></table>
<h1 id="打包和解压"><a href="#打包和解压" class="headerlink" title="打包和解压"></a>打包和解压</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>zip xxx.zip file</td>
<td>压缩⾄zip包</td>
</tr>
<tr>
<td>zip -r xxx.zip file1 file2 dir1</td>
<td>将多个⽂件+⽬录压成zip包</td>
</tr>
<tr>
<td>unzip xxx.zip</td>
<td>解压zip包</td>
</tr>
<tr>
<td>tar -cvf xxx.tar file</td>
<td>创建⾮压缩tar包</td>
</tr>
<tr>
<td>tar -cvf xxx.tar file1 file2 dir1</td>
<td>将多个⽂件+⽬录打tar包</td>
</tr>
<tr>
<td>tar -tf xxx.tar</td>
<td>查看tar包的内容</td>
</tr>
<tr>
<td>tar -xvf xxx.tar</td>
<td>解压tar包</td>
</tr>
<tr>
<td>tar -xvf xxx.tar -C &#x2F;dir</td>
<td>将tar包解压⾄指定⽬录</td>
</tr>
<tr>
<td>tar -cvfj xxx.tar.bz2 dir</td>
<td>创建bz2压缩包</td>
</tr>
<tr>
<td>tar -jxvf xxx.tar.bz2</td>
<td>解压bz2压缩包</td>
</tr>
<tr>
<td>tar -cvfz xxx.tar.gz dir</td>
<td>创建gzip压缩包</td>
</tr>
<tr>
<td>tar -zxvf xxx.tar.gz</td>
<td>解压gzip压缩包</td>
</tr>
<tr>
<td>bunzip2 xxx.bz2</td>
<td>解压bz2压缩包</td>
</tr>
<tr>
<td>bzip2 filename</td>
<td>压缩⽂件</td>
</tr>
<tr>
<td>gunzip xxx.gz</td>
<td>解压gzip压缩包</td>
</tr>
<tr>
<td>gzip filename</td>
<td>压缩⽂件</td>
</tr>
<tr>
<td>gzip -9 filename</td>
<td>最⼤程度压缩</td>
</tr>
</tbody></table>
<h1 id="RPM包管理命令"><a href="#RPM包管理命令" class="headerlink" title="RPM包管理命令"></a>RPM包管理命令</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>rpm -qa</td>
<td>查看已安装的rpm包</td>
</tr>
<tr>
<td>rpm -q pkg_name</td>
<td>查询某个rpm包</td>
</tr>
<tr>
<td>rpm -q –whatprovides xxx</td>
<td>显示xxx功能是由哪个包提供的</td>
</tr>
<tr>
<td>rpm -q –whatrequires xxx</td>
<td>显示xxx功能被哪个程序包依赖的</td>
</tr>
<tr>
<td>rpm -q –changelog xxx</td>
<td>显示xxx包的更改记录</td>
</tr>
<tr>
<td>rpm -qi pkg_name</td>
<td>查看⼀个包的详细信息</td>
</tr>
<tr>
<td>rpm -qd pkg_name</td>
<td>查询⼀个包所提供的⽂档</td>
</tr>
<tr>
<td>rpm -qc pkg_name</td>
<td>查看已安装rpm包提供的配置⽂件</td>
</tr>
<tr>
<td>rpm -ql pkg_name</td>
<td>查看⼀个包安装了哪些⽂件</td>
</tr>
<tr>
<td>rpm -qf filename</td>
<td>查看某个⽂件属于哪个包</td>
</tr>
<tr>
<td>rpm -qR pkg_name</td>
<td>查询包的依赖关系</td>
</tr>
<tr>
<td>rpm -ivh xxx.rpm</td>
<td>安装rpm包</td>
</tr>
<tr>
<td>rpm -ivh –test xxx.rpm</td>
<td>测试安装rpm包</td>
</tr>
<tr>
<td>rpm -ivh –nodeps xxx.rpm</td>
<td>安装rpm包时忽略依赖关系</td>
</tr>
<tr>
<td>rpm -e xxx</td>
<td>卸载程序包</td>
</tr>
<tr>
<td>rpm -Fvh pkg_name</td>
<td>升级确定已安装的rpm包</td>
</tr>
<tr>
<td>rpm -Uvh pkg_name</td>
<td>升级rpm包(若未安装则会安装)</td>
</tr>
<tr>
<td>rpm -V pkg_name</td>
<td>RPM包详细信息校验</td>
</tr>
</tbody></table>
<h1 id="YUM包管理命令"><a href="#YUM包管理命令" class="headerlink" title="YUM包管理命令"></a>YUM包管理命令</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>yum repolist enabled</td>
<td>显示可⽤的源仓库</td>
</tr>
<tr>
<td>yum search pkg_name</td>
<td>搜索软件包</td>
</tr>
<tr>
<td>yum install pkg_name</td>
<td>下载并安装软件包</td>
</tr>
<tr>
<td>yum install –downloadonly pkg_name</td>
<td>只 下 载 不 安 装</td>
</tr>
<tr>
<td>yum list</td>
<td>显示所有程序包</td>
</tr>
<tr>
<td>yum list installed</td>
<td>查看当前系统已安装包</td>
</tr>
<tr>
<td>yum list updates</td>
<td>查看可以更新的包列表</td>
</tr>
<tr>
<td>yum check-update</td>
<td>查看可升级的软件包</td>
</tr>
<tr>
<td>yum update</td>
<td>更新所有软件包</td>
</tr>
<tr>
<td>yum update pkg_name</td>
<td>升级指定软件包</td>
</tr>
<tr>
<td>yum deplist pkg_name</td>
<td>列出软件包依赖关系</td>
</tr>
<tr>
<td>yum remove pkg_name</td>
<td>删除软件包</td>
</tr>
<tr>
<td>yum clean all</td>
<td>清除缓存</td>
</tr>
<tr>
<td>yum clean packages</td>
<td>清除缓存的软件包</td>
</tr>
<tr>
<td>yum clean headers</td>
<td>清除缓存的header</td>
</tr>
</tbody></table>
<h1 id="DPKG包管理命令"><a href="#DPKG包管理命令" class="headerlink" title="DPKG包管理命令"></a>DPKG包管理命令</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>dpkg -c xxx.deb</td>
<td>列出deb包的内容</td>
</tr>
<tr>
<td>dpkg -i xxx.deb</td>
<td>安装&#x2F;更新deb包</td>
</tr>
<tr>
<td>dpkg -r pkg_name</td>
<td>移除deb包</td>
</tr>
<tr>
<td>dpkg -P pkg_name</td>
<td>移除deb包(不保留配置)</td>
</tr>
<tr>
<td>dpkg -l</td>
<td>查看系统中已安装deb包</td>
</tr>
<tr>
<td>dpkg -l pkg_name</td>
<td>显示包的⼤致信息</td>
</tr>
<tr>
<td>dpkg -L pkg_name</td>
<td>查看deb包安装的⽂件</td>
</tr>
<tr>
<td>dpkg -s pkg_name</td>
<td>查看包的详细信息</td>
</tr>
<tr>
<td>dpkg –unpack xxx.deb</td>
<td>解开deb包的内容</td>
</tr>
</tbody></table>
<h1 id="APT软件⼯具"><a href="#APT软件⼯具" class="headerlink" title="APT软件⼯具"></a>APT软件⼯具</h1><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>apt-cache search pkg_name</td>
<td>搜索程序包</td>
</tr>
<tr>
<td>apt-cache show pkg_name</td>
<td>获取包的概览信息</td>
</tr>
<tr>
<td>apt-get install pkg_name</td>
<td>安装&#x2F;升级软件包</td>
</tr>
<tr>
<td>apt-get purge pkg_name</td>
<td>卸载软件（包括配置）</td>
</tr>
<tr>
<td>apt-get remove pkg_name</td>
<td>卸载软件（不包括配置）</td>
</tr>
<tr>
<td>apt-get update</td>
<td>更新包索引信息</td>
</tr>
<tr>
<td>apt-get upgrade</td>
<td>更新已安装软件包</td>
</tr>
<tr>
<td>apt-get clean</td>
<td>清理缓存</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>HTTP代理</title>
    <url>/2022/09/19/HTTP%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>参考摘抄自：<a href="https://blog.csdn.net/FrancisHe/article/details/84667562">如何正确使用http proxy</a></p>
<h2 id="为什么需要-HTTP-代理"><a href="#为什么需要-HTTP-代理" class="headerlink" title="为什么需要 HTTP 代理"></a>为什么需要 <em>HTTP</em> 代理</h2><ul>
<li>访问内网，访问内部资源</li>
<li>设定权限限制<span id="more"></span></li>
<li>防止访问病毒网站</li>
<li>做缓存降低带宽开销</li>
<li>隐藏真实<em><strong>IP</strong></em></li>
</ul>
<h2 id="什么是-HTTP-代理"><a href="#什么是-HTTP-代理" class="headerlink" title="什么是 HTTP 代理"></a>什么是 <em>HTTP</em> 代理</h2><p><em><strong>HTTP</strong></em> 代理就是在客户端和服务器之间加入一层代理</p>
<p>传统<em><strong>client</strong></em> - <em><strong>server</strong></em> 结构</p>
<img src="/2022/09/19/HTTP%E4%BB%A3%E7%90%86/c-s.png" class="" title="传统cs结构">

<p>加入了<em><strong>HTTP</strong></em> 代理之后</p>
<img src="/2022/09/19/HTTP%E4%BB%A3%E7%90%86/c-p-s.png" class="" title="增加代理">



<h2 id="反向代理服务器"><a href="#反向代理服务器" class="headerlink" title="反向代理服务器"></a>反向代理服务器</h2><p>方向代理是相对于正向代理的概念，正向代理是隐藏客户端，反向代理就是隐藏服务器、是指对服务器的代理，可以实现屏蔽真实的服务器，并作为服务器的出入口</p>
<img src="/2022/09/19/HTTP%E4%BB%A3%E7%90%86/reverse-proxy.png" class="" title="反向代理">

<h2 id="实现加密传输的HTTPS代理？"><a href="#实现加密传输的HTTPS代理？" class="headerlink" title="实现加密传输的HTTPS代理？"></a>实现加密传输的<em>HTTPS</em>代理？</h2><p>为了确保数据传输的安全性，浏览器与服务器之间的HTTPS通信是加密的，所以浏览器通过代理服务器发送<em><strong>HTTPS</strong></em>请求，请求的站点地址和段都加密保存在<em><strong>HTTPS</strong></em>请求头中，代理服务器是如何确保通信是加密的又能进行转发呢？</p>
<p><strong>隧道代理&#x2F;<em>CONNECT</em></strong></p>
<p>为了解决这个问题，浏览器需要先通过明文<em><strong>HTTP</strong></em>形式向代理服务器发送一个<em><strong>CONNECT</strong></em>请求告诉目标站点地址和端口。</p>
<p>对于<em><strong>CONNECT</strong></em>连接而言，只是创建<em><strong>TCP</strong></em>连接，所以只需要提供服务器的域名和端口号即可，并不需要资源路径。</p>
<p>浏览器建立到服务器<em><strong>TCP</strong></em>连接产生的HTTP往返完全是明文的，因此仅需要提供 <em><strong>IP <em><strong>和端口，发送完整 <em><strong>URL</strong></em> 、</strong></em>cookie</strong></em>等信息会降低 <em><strong>HTTPS</strong></em> 的安全性</p>
<p><em><strong>GET</strong></em> vs <em><strong>CONNECT</strong></em></p>
<p>CONNECT 与 GET不同之处在于：代理服务器对CONNECT连接处理上，它会为其建立一个到目标服务器的连接，而不把<em><strong>CONNECT</strong></em>请求发送出去，建立连接以后代理服务器不会对连接数据做任何修改，只是转发(通常使用的是 <em><strong>SSL</strong></em> 的443端口)，代理服务器可在80端口通知支持<em><strong>GET</strong></em>和<em><strong>CONNECT</strong></em>。</p>
<p><strong>代理服务器如何处理<em>GET</em>呢？</strong></p>
<p>代理服务器会分析出目标服务器地址后建立连接，然后修改GET请求为直接发往目标服务器的格式，比如会删掉只是用来提供给代理的部分，以降低<em><strong>HTTP</strong></em>版本为代理服务器所能支持的版本，比如会降低<em><strong>HTTP&#x2F;1.1</strong></em>为<em><strong>HTTP&#x2F;1.0</strong></em>。</p>
<h2 id="使用-go-实现-HTTP-代理"><a href="#使用-go-实现-HTTP-代理" class="headerlink" title="使用 go 实现 HTTP 代理"></a>使用 <em>go</em> 实现 <em>HTTP</em> 代理</h2><p>建立代理的过程</p>
<p>隧道是建立在TCP连接之上的，代理服务器只负责传输层&#x2F; <em><strong>TCP</strong></em> 的数据转发，而转发的数据之后是通过了<em><strong>HTTPS</strong></em>加密的，所以，连接是安全的</p>
<img src="/2022/09/19/HTTP%E4%BB%A3%E7%90%86/Connect.png" class="" title="建立连接">



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    addr = <span class="string">&quot;127.0.0.1:7100&quot;</span></span><br><span class="line">    username = <span class="string">&quot;administrator&quot;</span></span><br><span class="line">    password = <span class="string">&quot;1234567&quot;</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//tunnel 通道处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tunnel</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断请求方法</span></span><br><span class="line">    <span class="keyword">if</span> r.Method != http.MethodConnect&#123;</span><br><span class="line">        log.Println(r.Method, r.RequestURI)</span><br><span class="line">        http.NotFound(w, r)<span class="comment">//404</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取用户名与密码</span></span><br><span class="line">    auth := r.Header.Get(<span class="string">&quot;Proxy-Authorization&quot;</span>)<span class="comment">//获取客户端授权信息</span></span><br><span class="line">    <span class="comment">//设置用户名与密码</span></span><br><span class="line">    r.Header.Set(<span class="string">&quot;Authorization&quot;</span>, auth)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证账户密码</span></span><br><span class="line">    u,p,ok := r.BasicAuth()<span class="comment">//BasicAuth依赖Authorization</span></span><br><span class="line">    <span class="keyword">if</span> !ok || !(username==u || password==p)&#123;</span><br><span class="line">       log.Printf(<span class="string">&quot;bad credential: username %s or password %s\n&quot;</span>, u, p)</span><br><span class="line">       http.Error(w, <span class="string">&quot;Method Not Allowed&quot;</span>, http.StatusMethodNotAllowed)</span><br><span class="line">       <span class="comment">//w.Write([]byte(&quot;密码错误&quot;))</span></span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取目标服务器地址</span></span><br><span class="line">    dstAddr := r.RequestURI</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//连接远程服务器</span></span><br><span class="line">    dstConn,err := net.Dial(<span class="string">&quot;tcp&quot;</span>, dstAddr)</span><br><span class="line">    <span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), http.StatusBadRequest)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> dstConn.Close()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//为客户端返回成功消息</span></span><br><span class="line">    w.Write([]<span class="type">byte</span>(<span class="string">&quot;HTTP/1.1 200 OK\r\n\r\n&quot;</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//劫持writer获取潜在conn</span></span><br><span class="line">    <span class="comment">//HTTP是应用层协议，下层TCP是网络层协议，hijack可从HTTP Response获取TCP连接，若是HTTPS服务器则是TLS连接。</span></span><br><span class="line">    <span class="comment">//bio是带缓冲的读写者</span></span><br><span class="line">    srcConn,bio,err := w.(http.Hijacker).Hijack()</span><br><span class="line">    <span class="keyword">if</span> err!= <span class="literal">nil</span>&#123;</span><br><span class="line">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> srcConn.Close()</span><br><span class="line">    <span class="comment">//创建两个线程</span></span><br><span class="line">    wg := &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">//并发执行单元1: 将TCP连接拷贝到HTTP连接中</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        <span class="comment">//缓存处理</span></span><br><span class="line">        n := bio.Reader.Buffered()</span><br><span class="line">        <span class="keyword">if</span> n&gt;<span class="number">0</span> &#123;</span><br><span class="line">            n64,err := io.CopyN(dstConn, bio, <span class="type">int64</span>(n))</span><br><span class="line">            <span class="keyword">if</span> n64!=<span class="type">int64</span>(n) || err!=<span class="literal">nil</span>&#123;</span><br><span class="line">                log.Printf(<span class="string">&quot;io.CopyN: %d %v\n&quot;</span>, n64, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行全双工的双向数据拷贝(中继)</span></span><br><span class="line">        io.Copy(dstConn, srcConn)<span class="comment">//relay: src-&gt;dst</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">//并发执行单元2：将HTTP连接拷贝到TCP连接中</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        <span class="comment">//进行全双工的双向数据拷贝(中继)</span></span><br><span class="line">        io.Copy(srcConn, dstConn)<span class="comment">//relay:dst-&gt;src</span></span><br><span class="line">    &#125;()</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器 go run main.go</span></span><br><span class="line"><span class="comment">//客户端 curl -p --proxy username:password@hostname:port http://target.com</span></span><br><span class="line"><span class="comment">//curl -p --proxy administartor:1234567@127.0.0.1:7100 http://www.baidu.com</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//HTTP处理器</span></span><br><span class="line">    handler := http.HandlerFunc(tunnel)</span><br><span class="line">    err := http.ListenAndServe(addr, handler)</span><br><span class="line">    <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
