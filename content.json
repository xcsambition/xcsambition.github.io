{"meta":{"title":"xcs的博客","subtitle":"记录美好生活","description":"记录我的学习历程","author":"xcs","url":"https://xcsambition.github.io","root":"/"},"pages":[{"title":"about","date":"2022-09-18T08:53:35.000Z","updated":"2022-09-18T08:53:35.655Z","comments":true,"path":"about/index.html","permalink":"https://xcsambition.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"HTTP代理","slug":"HTTP代理","date":"2022-09-19T09:47:29.000Z","updated":"2022-09-19T10:03:00.842Z","comments":true,"path":"2022/09/19/HTTP代理/","link":"","permalink":"https://xcsambition.github.io/2022/09/19/HTTP%E4%BB%A3%E7%90%86/","excerpt":"","text":"参考摘抄自：如何正确使用http proxy 为什么需要 HTTP 代理 访问内网，访问内部资源 设定权限限制 防止访问病毒网站 做缓存降低带宽开销 隐藏真实IP 什么是 HTTP 代理HTTP 代理就是在客户端和服务器之间加入一层代理 传统client - server 结构 加入了HTTP 代理之后 反向代理服务器方向代理是相对于正向代理的概念，正向代理是隐藏客户端，反向代理就是隐藏服务器、是指对服务器的代理，可以实现屏蔽真实的服务器，并作为服务器的出入口 实现加密传输的HTTPS代理？为了确保数据传输的安全性，浏览器与服务器之间的HTTPS通信是加密的，所以浏览器通过代理服务器发送HTTPS请求，请求的站点地址和段都加密保存在HTTPS请求头中，代理服务器是如何确保通信是加密的又能进行转发呢？ 隧道代理&#x2F;CONNECT 为了解决这个问题，浏览器需要先通过明文HTTP形式向代理服务器发送一个CONNECT请求告诉目标站点地址和端口。 对于CONNECT连接而言，只是创建TCP连接，所以只需要提供服务器的域名和端口号即可，并不需要资源路径。 浏览器建立到服务器TCP连接产生的HTTP往返完全是明文的，因此仅需要提供 IP 和端口，发送完整 URL 、cookie等信息会降低 HTTPS 的安全性 GET vs CONNECT CONNECT 与 GET不同之处在于：代理服务器对CONNECT连接处理上，它会为其建立一个到目标服务器的连接，而不把CONNECT请求发送出去，建立连接以后代理服务器不会对连接数据做任何修改，只是转发(通常使用的是 SSL 的443端口)，代理服务器可在80端口通知支持GET和CONNECT。 代理服务器如何处理GET呢？ 代理服务器会分析出目标服务器地址后建立连接，然后修改GET请求为直接发往目标服务器的格式，比如会删掉只是用来提供给代理的部分，以降低HTTP版本为代理服务器所能支持的版本，比如会降低HTTP&#x2F;1.1为HTTP&#x2F;1.0。 使用 go 实现 HTTP 代理建立代理的过程 隧道是建立在TCP连接之上的，代理服务器只负责传输层&#x2F; TCP 的数据转发，而转发的数据之后是通过了HTTPS加密的，所以，连接是安全的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899package main import ( &quot;io&quot; &quot;log&quot; &quot;net&quot; &quot;net/http&quot; &quot;sync&quot;) var ( addr = &quot;127.0.0.1:7100&quot; username = &quot;administrator&quot; password = &quot;1234567&quot;) //tunnel 通道处理func tunnel(w http.ResponseWriter, r *http.Request)&#123; //判断请求方法 if r.Method != http.MethodConnect&#123; log.Println(r.Method, r.RequestURI) http.NotFound(w, r)//404 return &#125; //获取用户名与密码 auth := r.Header.Get(&quot;Proxy-Authorization&quot;)//获取客户端授权信息 //设置用户名与密码 r.Header.Set(&quot;Authorization&quot;, auth) //验证账户密码 u,p,ok := r.BasicAuth()//BasicAuth依赖Authorization if !ok || !(username==u || password==p)&#123; log.Printf(&quot;bad credential: username %s or password %s\\n&quot;, u, p) http.Error(w, &quot;Method Not Allowed&quot;, http.StatusMethodNotAllowed) //w.Write([]byte(&quot;密码错误&quot;)) return &#125; //获取目标服务器地址 dstAddr := r.RequestURI //连接远程服务器 dstConn,err := net.Dial(&quot;tcp&quot;, dstAddr) if err!=nil &#123; http.Error(w, err.Error(), http.StatusBadRequest) return &#125; defer dstConn.Close() //为客户端返回成功消息 w.Write([]byte(&quot;HTTP/1.1 200 OK\\r\\n\\r\\n&quot;)) //劫持writer获取潜在conn //HTTP是应用层协议，下层TCP是网络层协议，hijack可从HTTP Response获取TCP连接，若是HTTPS服务器则是TLS连接。 //bio是带缓冲的读写者 srcConn,bio,err := w.(http.Hijacker).Hijack() if err!= nil&#123; http.Error(w, err.Error(), http.StatusInternalServerError) return &#125; defer srcConn.Close() //创建两个线程 wg := &amp;sync.WaitGroup&#123;&#125; wg.Add(2) //并发执行单元1: 将TCP连接拷贝到HTTP连接中 go func()&#123; defer wg.Done() //缓存处理 n := bio.Reader.Buffered() if n&gt;0 &#123; n64,err := io.CopyN(dstConn, bio, int64(n)) if n64!=int64(n) || err!=nil&#123; log.Printf(&quot;io.CopyN: %d %v\\n&quot;, n64, err) return &#125; &#125; //进行全双工的双向数据拷贝(中继) io.Copy(dstConn, srcConn)//relay: src-&gt;dst &#125;() //并发执行单元2：将HTTP连接拷贝到TCP连接中 go func()&#123; defer wg.Done() //进行全双工的双向数据拷贝(中继) io.Copy(srcConn, dstConn)//relay:dst-&gt;src &#125;() wg.Wait()&#125;//服务器 go run main.go//客户端 curl -p --proxy username:password@hostname:port http://target.com//curl -p --proxy administartor:1234567@127.0.0.1:7100 http://www.baidu.comfunc main()&#123; //HTTP处理器 handler := http.HandlerFunc(tunnel) err := http.ListenAndServe(addr, handler) if err!=nil&#123; panic(err) &#125;&#125;","categories":[],"tags":[]},{"title":"linux常见命令","slug":"llinux常见命令","date":"2022-09-18T08:04:12.000Z","updated":"2022-09-18T09:10:32.245Z","comments":true,"path":"2022/09/18/llinux常见命令/","link":"","permalink":"https://xcsambition.github.io/2022/09/18/llinux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/","excerpt":"","text":"关机&#x2F;重启&#x2F;注销 常用命令 作用 shutdown -h now 即刻关机 shutdown -h 10 10分钟后关机 shutdown -h 11:00 11：00关机 shutdown -h +10 预定时间关机（10分钟后） shutdown -c 取消指定时间关机 shutdown -r now 重启 shutdown -r 10 10分钟之后重启 shutdown -r 11:00 定时重启 reboot 重启 init 6 重启 init 0 ⽴刻关机 telinit 0 关机 poweroff ⽴刻关机 halt 关机 sync buff数据同步到磁盘 logout 退出登录Shell 系统信息和性能查看 常用命令 作用 uname -a 查看内核&#x2F;OS&#x2F;CPU信息 uname -r 查看内核版本 uname -m 查看处理器架构 arch 查看处理器架构 hostname 查看计算机名 who 显示当前登录系统的⽤户 who am i 显示登录时的⽤户名 whoami 显示当前⽤户名 cat &#x2F;proc&#x2F;version 查看linux版本信息 cat &#x2F;proc&#x2F;cpuinfo 查看CPU信息 cat &#x2F;proc&#x2F;interrupts 查看中断 cat &#x2F;proc&#x2F;loadavg 查看系统负载 uptime 查看系统运⾏时间、⽤户数、负载 env 查看系统的环境变量 lsusb -tv 查看系统USB设备信息 lspci -tv 查看系统PCI设备信息 lsmod 查看已加载的系统模块 grep MemTotal &#x2F;proc&#x2F;meminfo 查看内存总量 grep MemFree &#x2F;proc&#x2F;meminfo 查看空闲内存量 free -m 查看内存⽤量和交换区⽤量 date 显示系统⽇期时间 cal 2021 显示2021⽇历表 top 动态显示cpu&#x2F;内存&#x2F;进程等情况 vmstat 1 20 每1秒采⼀次系统状态，采20次 iostat 查看io读写&#x2F;cpu使⽤情况 查看io读写&#x2F;cpu使⽤情况 查询cpu使⽤情况（1秒⼀次，共10次） sar -d 1 10 查询磁盘性能 磁盘和分区 常用命令 作用 fdisk -l 查看所有磁盘分区 swapon -s 查看所有交换分区 df -h 查看磁盘使⽤情况及挂载点 df -hl 同上 du -sh &#x2F;dir 查看指定某个⽬录的⼤⼩ du -sk * &amp;#124; sort -rn 从⾼到低依次显示⽂件和⽬录⼤⼩ mount &#x2F;dev&#x2F;hda2 &#x2F;mnt&#x2F;hda2 挂载hda2盘 mount -t ntfs &#x2F;dev&#x2F;sdc1 &#x2F;mnt&#x2F;usbhd1 指定⽂件系统类型挂载（如ntfs） mount -o loop xxx.iso &#x2F;mnt&#x2F;cdrom 挂 载 iso ⽂ 件 umount -v &#x2F;dev&#x2F;sda1 通过设备名卸载 umount -v &#x2F;mnt&#x2F;mymnt 通过挂载点卸载 fuser -km &#x2F;mnt&#x2F;hda1 强制卸载(慎⽤) ⽤户和⽤户组 常用命令 作用 useradd codesheep 创建⽤户 userdel -r codesheep 删除⽤户 usermod -g group_name user_name 修改⽤户的组 usermod -aG group_name user_name 将⽤户添加到组 usermod -s &#x2F;bin&#x2F;ksh -d &#x2F;home&#x2F;codepig –g dev codesheep 修改⽤户codesheep的登录Shell、主⽬录以及⽤户组 groups test 查看test⽤户所在的组 groupadd group_name 创建⽤户组 groupdel group_name 删除⽤户组 groupmod -n new_name old_name 重命名⽤户组 su - user_name su - user_name passwd 修改⼝令 passwd codesheep 修改某⽤户的⼝令 w 查看活动⽤户 id codesheep 查看指定⽤户codesheep信息 last 查看⽤户登录⽇志 crontab -l 查看当前⽤户的计划任务 cut -d: -f1 &#x2F;etc&#x2F;passwd 查看系统所有⽤户 cut -d: -f1 &#x2F;etc&#x2F;group 查看系统所有组 ⽹络和进程管理 常用命令 作用 ifconfig 查看⽹络接⼝属性 ifconfig eth0 查看某⽹卡的配置 route -n 查看路由表 netstat -lntp 查看所有监听端⼝ netstat -antp 查看已经建⽴的TCP连接 netstat -lutp 查看TCP&#x2F;UDP的状态信息 ifup eth0 启⽤eth0⽹络设备 ifdown eth0 禁⽤eth0⽹络设备 iptables -L 查看iptables规则 ifconfig eth0 192.168.1.1 netmask 255.255.255.0 配置ip地址 dhclient eth0 以dhcp模式启⽤eth0 route add -net 0&#x2F;0 gw Gateway_IP 配置默认⽹关 route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 配置静态路由到达⽹络’192.168.0.0&#x2F;16’ route del 0&#x2F;0 gw Gateway_IP 删除静态路由 hostname 查看主机名 host www.baidu.com 解析主机名 nslookup www.baidu.com 查询DNS记录，查看域名解析是否正常 ps -ef 查看所有进程 ps -ef &amp;#124; grep codesheep 过滤出你需要的进程 kill -s name kill指定名称的进程 kill -s pid kill指定pid的进程 top 实时显示进程状态 vmstat 1 20 每1秒采⼀次系统状态，采20次 iostat iostat sar -u 1 10 查询cpu使⽤情况（1秒⼀次，共10次） sar -d 1 10 查询磁盘性能 常⻅系统服务命令 常用命令 作用 chkconfig –list 列出系统服务 service &lt;服务名&gt; status 查看某个服务 service &lt;服务名&gt; start 启动某个服务 service &lt;服务名&gt; stop 终⽌某个服务 service &lt;服务名&gt; restart 重启某个服务 systemctl status &lt;服务名&gt; 查看某个服务 systemctl start &lt;服务名&gt; 启动某个服务 systemctl stop &lt;服务名&gt; 终⽌某个服务 systemctl restart &lt;服务名&gt; 重启某个服务 systemctl enable &lt;服务名&gt; 关闭⾃启动 systemctl disable &lt;服务名&gt; 关闭⾃启动 ⽂件和⽬录操作 常用命令 作用 cd &lt;⽬录名&gt; 进⼊某个⽬录 cd .. 回上级⽬录 cd ..&#x2F;.. 回上两级⽬录 cd 进个⼈主⽬录 cd - 回上⼀步所在⽬录 pwd 显示当前路径 ls 查看⽂件⽬录列表 ls -F 查看⽬录中内容（显示是⽂件还是⽬录） ls -l 查看⽂件和⽬录的详情列表 ls -a 查看隐藏⽂件 ls -lh 查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性） ls -lSr 查看⽂件和⽬录列表（以⽂件⼤⼩升序查看） tree 查看⽂件和⽬录的树形结构 mkdir &lt;⽬录名&gt; 创建⽬录 mkdir dir1 dir2 同时创建两个⽬录 mkdir -p &#x2F;tmp&#x2F;dir1&#x2F;dir2 创建⽬录树 rm -f file1 删除’file1’⽂件 rmdir dir1 删除’dir1’⽬录 rm -rf dir1 删除’dir1’⽬录和其内容 rm -rf dir1 dir2 同时删除两个⽬录及其内容 mv old_dir new_dir 重命名&#x2F;移动⽬录 cp file1 file2 复制⽂件 cp dir&#x2F;* . 复制某⽬录下的所有⽂件⾄当前⽬录 cp -a dir1 dir2 复制⽬录 cp -a &#x2F;tmp&#x2F;dir1 . 复制⼀个⽬录⾄当前⽬录 ln -s file1 link1 创建指向⽂件&#x2F;⽬录的软链接 ln file1 lnk1 创建指向⽂件&#x2F;⽬录的物理链接 find &#x2F; -name file1 从跟⽬录开始搜索⽂件&#x2F;⽬录 find &#x2F; -user user1 搜索⽤户user1的⽂件&#x2F;⽬录 find &#x2F;dir -name *.bin 在⽬录&#x2F;dir中搜带有.bin后缀的⽂件 locate &lt;关键词&gt; 快速定位⽂件 locate *.mp4 寻找.mp4结尾的⽂件 whereis &lt;关键词&gt; 显示某⼆进制⽂件&#x2F;可执⾏⽂件的路径 which &lt;关键词&gt; 查找系统⽬录下某的⼆进制⽂件 chmod ugo+rwx dir1 设置⽬录所有者(u)、群组(g)及其他⼈(o)的读（r）写(w)执⾏(x)权限 chmod go-rwx dir1 移除群组(g)与其他⼈(o)对⽬录的读写执⾏权限 chown user1 file1 改变⽂件的所有者属性 chown -R user1 dir1 改变⽬录的所有者属性 chgrp group1 file1 改变⽂件群组 chown user1:group1 file1 改变⽂件的所有⼈和群组 ⽂件查看和处理 常用命令 作用 cat file1 查看⽂件内容 cat -n file1 查看内容并标示⾏数 tac file1 从最后⼀⾏开始反看⽂件内容 more file1 more file1 less file1 类似more命令，但允许反向操作 head -2 file1 查看⽂件前两⾏ tail -2 file1 查看⽂件后两⾏ tail -f &#x2F;log&#x2F;msg 实时查看添加到⽂件中的内容 grep codesheep hello.txt 在⽂件hello.txt中查找关键词codesheep grep ^sheep hello.txt 在⽂件hello.txt中查找以sheep开头的内容 grep [0-9] hello.txt 选择hello.txt⽂件中所有包含数字的⾏ sed ‘s&#x2F;s1&#x2F;s2&#x2F;g’ hello.txt 将hello.txt⽂件中的s1替换成s2 sed ‘&#x2F;^$&#x2F;d’ hello.txt 从hello.txt⽂件中删除所有空⽩⾏ sed ‘&#x2F; *#&#x2F;d; &#x2F;^$&#x2F;d’ hello.txt 从hello.txt⽂件中删除所有注释和空⽩⾏ sed -e ‘1d’ hello.txt 从⽂件hello.txt 中排除第⼀⾏ sed -n ‘&#x2F;s1&#x2F;p’ hello.txt 查看只包含关键词”s1”的⾏ sed -e ‘s&#x2F; *$&#x2F;&#x2F;‘ hello.txt 删除每⼀⾏最后的空⽩字符 sed -e ‘s&#x2F;s1&#x2F;&#x2F;g’ hello.txt 从⽂档中只删除词汇s1并保留剩余全部 sed -n ‘1,5p;5q’ hello.txt 查看从第⼀⾏到第5⾏内容 sed -n ‘5p;5q’ hello.txt 查看第5⾏ paste file1 file2 合并两个⽂件或两栏的内容 paste -d ‘+’ file1 file2 合并两个⽂件或两栏的内容，中间⽤”+”区分 sort file1 file2 排序两个⽂件的内容 comm -1 file1 file2 ⽐较两个⽂件的内容(去除’file1’所含内容) comm -2 file1 file2 ⽐较两个⽂件的内容(去除’file2’所含内容 comm -3 file1 file2 ⽐较两个⽂件的内容(去除两⽂件共有部分) 打包和解压 常用命令 作用 zip xxx.zip file 压缩⾄zip包 zip -r xxx.zip file1 file2 dir1 将多个⽂件+⽬录压成zip包 unzip xxx.zip 解压zip包 tar -cvf xxx.tar file 创建⾮压缩tar包 tar -cvf xxx.tar file1 file2 dir1 将多个⽂件+⽬录打tar包 tar -tf xxx.tar 查看tar包的内容 tar -xvf xxx.tar 解压tar包 tar -xvf xxx.tar -C &#x2F;dir 将tar包解压⾄指定⽬录 tar -cvfj xxx.tar.bz2 dir 创建bz2压缩包 tar -jxvf xxx.tar.bz2 解压bz2压缩包 tar -cvfz xxx.tar.gz dir 创建gzip压缩包 tar -zxvf xxx.tar.gz 解压gzip压缩包 bunzip2 xxx.bz2 解压bz2压缩包 bzip2 filename 压缩⽂件 gunzip xxx.gz 解压gzip压缩包 gzip filename 压缩⽂件 gzip -9 filename 最⼤程度压缩 RPM包管理命令 常用命令 作用 rpm -qa 查看已安装的rpm包 rpm -q pkg_name 查询某个rpm包 rpm -q –whatprovides xxx 显示xxx功能是由哪个包提供的 rpm -q –whatrequires xxx 显示xxx功能被哪个程序包依赖的 rpm -q –changelog xxx 显示xxx包的更改记录 rpm -qi pkg_name 查看⼀个包的详细信息 rpm -qd pkg_name 查询⼀个包所提供的⽂档 rpm -qc pkg_name 查看已安装rpm包提供的配置⽂件 rpm -ql pkg_name 查看⼀个包安装了哪些⽂件 rpm -qf filename 查看某个⽂件属于哪个包 rpm -qR pkg_name 查询包的依赖关系 rpm -ivh xxx.rpm 安装rpm包 rpm -ivh –test xxx.rpm 测试安装rpm包 rpm -ivh –nodeps xxx.rpm 安装rpm包时忽略依赖关系 rpm -e xxx 卸载程序包 rpm -Fvh pkg_name 升级确定已安装的rpm包 rpm -Uvh pkg_name 升级rpm包(若未安装则会安装) rpm -V pkg_name RPM包详细信息校验 YUM包管理命令 常用命令 作用 yum repolist enabled 显示可⽤的源仓库 yum search pkg_name 搜索软件包 yum install pkg_name 下载并安装软件包 yum install –downloadonly pkg_name 只 下 载 不 安 装 yum list 显示所有程序包 yum list installed 查看当前系统已安装包 yum list updates 查看可以更新的包列表 yum check-update 查看可升级的软件包 yum update 更新所有软件包 yum update pkg_name 升级指定软件包 yum deplist pkg_name 列出软件包依赖关系 yum remove pkg_name 删除软件包 yum clean all 清除缓存 yum clean packages 清除缓存的软件包 yum clean headers 清除缓存的header DPKG包管理命令 常用命令 作用 dpkg -c xxx.deb 列出deb包的内容 dpkg -i xxx.deb 安装&#x2F;更新deb包 dpkg -r pkg_name 移除deb包 dpkg -P pkg_name 移除deb包(不保留配置) dpkg -l 查看系统中已安装deb包 dpkg -l pkg_name 显示包的⼤致信息 dpkg -L pkg_name 查看deb包安装的⽂件 dpkg -s pkg_name 查看包的详细信息 dpkg –unpack xxx.deb 解开deb包的内容 APT软件⼯具 常用命令 作用 apt-cache search pkg_name 搜索程序包 apt-cache show pkg_name 获取包的概览信息 apt-get install pkg_name 安装&#x2F;升级软件包 apt-get purge pkg_name 卸载软件（包括配置） apt-get remove pkg_name 卸载软件（不包括配置） apt-get update 更新包索引信息 apt-get upgrade 更新已安装软件包 apt-get clean 清理缓存","categories":[],"tags":[]}],"categories":[],"tags":[]}